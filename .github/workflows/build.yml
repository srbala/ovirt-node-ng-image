---
name: Build
permissions:
  issues: write
  pull-requests: read
  contents: read

on:
  workflow_dispatch:
    inputs:
      keep_workdir:
        description: set to anything to keep around the work directory for inspection after the job finishes
        required: false
      extract_install_logs:
        description: set to anything to save anaconda logs and remove from rpm/iso
        required: false
      finalbuild:
        description: set to True for a final build
        required: true
        default: "False"
      checkiso:
        description: set to anything to verify the ISO
        required: false
  push:
    branches: [master]
  schedule:
    # Running every morning in EMEA timezone
    - cron: '0 6 * * *'

jobs:
  set-kernel:
    strategy:
      matrix:
        name: [al8, al9]
    runs-on: [image-builders, "${{ matrix.name }}"]
    steps:
      - name: mount /host/modules
        run: |
          echo "Kernel version $(uname -r)"
          mkdir -p /host/modules
          umount -f /host/modules 2>/dev/null || true
          mount --bind /lib/modules/$(uname -r) /host/modules

  build-matrix:
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: al8
            container-name: ovirt-al8
          - name: al9
            container-name: ovirt-al9
    runs-on: [image-builders, "${{ matrix.name }}"]
    needs: set-kernel
    container:
      image: quay.io/almalinux/build-tools:${{ matrix.container-name }}
      volumes:
        - /host/modules:/host/modules
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build
        env:
          EXTRACT_INSTALL_LOGS: ${{ github.event.inputs.extract_install_logs }}
          FINALBUILD: ${{ github.event.inputs.finalbuild }}
          CHECK_ISO: ${{ github.event.inputs.checkiso }}
          SUPERMIN_MODULES: /host/modules
          SUPERMIN_KERNEL: /host/modules/vmlinuz
        run: ./build.sh

      - name: Upload logs and manifests to github
        uses: actions/upload-artifact@v2
        with:
          name: "logs-and-manifests${{ matrix.name }}"
          path: |
            exported-artifacts

      - name: Clean up mount and entire workdir
        if: always()
        run: |
          umount -f /host/modules
          [[ -z "${{ github.event.inputs.keep_workdir }}" ]] && rm -rf $PWD/*
